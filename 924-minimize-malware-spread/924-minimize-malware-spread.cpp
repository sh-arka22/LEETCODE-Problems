class Solution {
public:
    int *parr;
    int *size;
    int *infected;
    
    int findParr(int v){
        return parr[v] == v ? v : (parr[v] = findParr(parr[v]));
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        parr = new int [n];
        size = new int [n];
        
        for(int i=0;i<n;i++){
            parr[i] = i;
            size[i] = 1;
        }
        
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(graph[i][j] == 0) continue;
                
                int p1 = findParr(i);
                int p2 = findParr(j);
                
                if(p1 != p2){
                    parr[p2] = p1;
                    size[p1] += size[p2];
                }
            }
        }
        
        infected = new int [n];
        fill(infected, infected+n, 0);
        for(int ele:initial){
            int p = findParr(ele);
            infected[p] ++;
        }
        
        sort(initial.begin(), initial.end());
        int ans = initial[0];
        int maxi = 0;
        for(int ele : initial){
            int p = findParr(ele);
            if(infected[p] == 1 and size[p] > maxi){
                maxi = size[p];
                ans = ele;
            }
        }
        
        return ans;
    }
};