class Solution {
public:
    const static int N = 1e3;
    int parr[N];
    int population[N];
    int infected[N];
    
    int findParr(int v){
        return parr[v] == v ? v : (parr[v] = findParr(parr[v]));
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size(), m = graph[0].size();
        
        for(int i=0;i<N;i++){
            parr[i] = i;
            population[i] = 1;
        }
        
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(graph[i][j] == 0 or i==j) continue;
                int p1 = findParr(i);
                int p2 = findParr(j);
                if(p1 != p2){
                    parr[p2] = p1;
                    population[p1] += population[p2];
                }
            }
        }
        for(int node: initial){
            int p = findParr(node);
            infected[p]++;
        }
        
        sort(begin(initial), end(initial));
        
        int ans = initial[0];
        int maxPopulation = 0;
        for(int node: initial){
            int p = findParr(node);
            int currPopulation = population[p];
            if(currPopulation>maxPopulation and infected[p] == 1){
                ans = node;
                maxPopulation = currPopulation;
            }
        }
        return ans;
    }
};